{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const RestaurantList = () => {\n//   const [restaurants, setRestaurants] = useState([]);\n//   const [votesLeft, setVotesLeft] = useState(3);\n//   const [newRestaurantName, setNewRestaurantName] = useState('');\n//   const [editRestaurantId, setEditRestaurantId] = useState(null);\n//   const [editRestaurantName, setEditRestaurantName] = useState('');\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // Check if the user is authenticated\n//   useEffect(() => {\n//     const checkAuth = () => {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         // Validate token with a test request or set isAuthenticated to true\n//         setIsAuthenticated(true); // Simplified assumption; ideally validate token\n//       } else {\n//         setIsAuthenticated(false);\n//       }\n//     };\n\n//     checkAuth();\n//   }, []);\n\n//   // Fetch restaurants and votes left\n//   useEffect(() => {\n//     const fetchRestaurants = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await axios.get('http://127.0.0.1:8000/api/restaurants/restaurants/', { \n//           headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } \n//         });\n//         console.log('API Response:', response.data);\n//         setRestaurants(response.data.restaurants || []);\n//         setVotesLeft(response.data.votesLeft || 3);\n//       } catch (error) {\n//         console.error('Error fetching restaurants:', error);\n//         setError('Error fetching restaurants');\n//         setRestaurants([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchRestaurants();\n//   }, [isAuthenticated]); // Re-fetch restaurants if authentication status changes\n\n//   // Handle voting for a restaurant\n//   const handleVote = async (restaurantId, voteType) => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to vote.');\n//       return;\n//     }\n\n//     if (votesLeft <= 0) {\n//       alert('No votes left for today!');\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://127.0.0.1:8000/api/restaurants/restaurants/vote/', \n//         { restaurantId, voteType }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants(response.data.restaurants || []);\n//       setVotesLeft(response.data.votesLeft || votesLeft);\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//       alert('An error occurred while voting.');\n//     }\n//   };\n\n//   // Handle adding a new restaurant\n//   const handleAddRestaurant = async () => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to add a restaurant.');\n//       return;\n//     }\n\n//     if (!newRestaurantName) {\n//       alert('Please enter a restaurant name.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://127.0.0.1:8000/api/restaurants/restaurants/add_restaurant/', \n//         { name: newRestaurantName }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants([...restaurants, response.data]);\n//       setNewRestaurantName('');\n//     } catch (error) {\n//       console.error('Error adding restaurant:', error);\n//       alert('An error occurred while adding the restaurant.');\n//     }\n//   };\n\n//   // Handle updating a restaurant\n//   const handleUpdateRestaurant = async () => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to update a restaurant.');\n//       return;\n//     }\n\n//     if (!editRestaurantName) {\n//       alert('Please enter a restaurant name.');\n//       return;\n//     }\n\n//     try {\n//       await axios.put(`http://127.0.0.1:8000/api/restaurants/restaurants/${editRestaurantId}/`, \n//         { name: editRestaurantName }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       const updatedRestaurants = restaurants.map(restaurant => \n//         restaurant.id === editRestaurantId ? { ...restaurant, name: editRestaurantName } : restaurant\n//       );\n//       setRestaurants(updatedRestaurants);\n//       setEditRestaurantId(null);\n//       setEditRestaurantName('');\n//     } catch (error) {\n//       console.error('Error updating restaurant:', error);\n//       alert('An error occurred while updating the restaurant.');\n//     }\n//   };\n\n//   // Handle deleting a restaurant\n//   const handleDeleteRestaurant = async (restaurantId) => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to delete a restaurant.');\n//       return;\n//     }\n\n//     try {\n//       await axios.delete(`http://127.0.0.1:8000/api/restaurants/restaurants/${restaurantId}/`, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants(restaurants.filter(restaurant => restaurant.id !== restaurantId));\n//     } catch (error) {\n//       console.error('Error deleting restaurant:', error);\n//       alert('An error occurred while deleting the restaurant.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Restaurants</h1>\n//       <p>Votes left today: {votesLeft}</p>\n//       {loading && <p>Loading...</p>}\n//       {error && <p>{error}</p>}\n\n//       {isAuthenticated ? (\n//         <div>\n//           <h2>Add New Restaurant</h2>\n//           <input \n//             type=\"text\" \n//             value={newRestaurantName} \n//             onChange={(e) => setNewRestaurantName(e.target.value)} \n//             placeholder=\"Restaurant Name\" \n//           />\n//           <button onClick={handleAddRestaurant}>Add Restaurant</button>\n//         </div>\n//       ) : (\n//         <p>Please log in to add a restaurant or vote.</p>\n//       )}\n\n//       {isAuthenticated && editRestaurantId && (\n//         <div>\n//           <h2>Update Restaurant</h2>\n//           <input \n//             type=\"text\" \n//             value={editRestaurantName} \n//             onChange={(e) => setEditRestaurantName(e.target.value)} \n//             placeholder=\"New Restaurant Name\" \n//           />\n//           <button onClick={handleUpdateRestaurant}>Update Restaurant</button>\n//         </div>\n//       )}\n\n//       <ul>\n//         {Array.isArray(restaurants) && restaurants.length > 0 ? (\n//           restaurants.map(restaurant => (\n//             <li key={restaurant.id}>\n//               {restaurant.name} - Votes: {restaurant.votes || 0}\n//               {isAuthenticated ? (\n//                 <>\n//                   <button onClick={() => handleVote(restaurant.id, 'first')}>Vote 1</button>\n//                   <button onClick={() => handleVote(restaurant.id, 'second')}>Vote 0.5</button>\n//                   <button onClick={() => handleVote(restaurant.id, 'third')}>Vote 0.25</button>\n//                   <button onClick={() => { setEditRestaurantId(restaurant.id); setEditRestaurantName(restaurant.name); }}>Edit</button>\n//                   <button onClick={() => handleDeleteRestaurant(restaurant.id)}>Delete</button>\n//                 </>\n//               ) : (\n//                 <p>Login to vote</p>\n//               )}\n//             </li>\n//           ))\n//         ) : (\n//           <p>No restaurants available</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default RestaurantList;","map":{"version":3,"names":[],"sources":["/home/ts/Desktop/Fullstack Practice/GSO TASK/lunch-vote-frontend/src/components/RestaurantList.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const RestaurantList = () => {\n//   const [restaurants, setRestaurants] = useState([]);\n//   const [votesLeft, setVotesLeft] = useState(3);\n//   const [newRestaurantName, setNewRestaurantName] = useState('');\n//   const [editRestaurantId, setEditRestaurantId] = useState(null);\n//   const [editRestaurantName, setEditRestaurantName] = useState('');\n//   const [error, setError] = useState('');\n//   const [loading, setLoading] = useState(false);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n//   // Check if the user is authenticated\n//   useEffect(() => {\n//     const checkAuth = () => {\n//       const token = localStorage.getItem('access_token');\n//       if (token) {\n//         // Validate token with a test request or set isAuthenticated to true\n//         setIsAuthenticated(true); // Simplified assumption; ideally validate token\n//       } else {\n//         setIsAuthenticated(false);\n//       }\n//     };\n\n//     checkAuth();\n//   }, []);\n\n//   // Fetch restaurants and votes left\n//   useEffect(() => {\n//     const fetchRestaurants = async () => {\n//       setLoading(true);\n//       try {\n//         const response = await axios.get('http://127.0.0.1:8000/api/restaurants/restaurants/', { \n//           headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } \n//         });\n//         console.log('API Response:', response.data);\n//         setRestaurants(response.data.restaurants || []);\n//         setVotesLeft(response.data.votesLeft || 3);\n//       } catch (error) {\n//         console.error('Error fetching restaurants:', error);\n//         setError('Error fetching restaurants');\n//         setRestaurants([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n\n//     fetchRestaurants();\n//   }, [isAuthenticated]); // Re-fetch restaurants if authentication status changes\n\n//   // Handle voting for a restaurant\n//   const handleVote = async (restaurantId, voteType) => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to vote.');\n//       return;\n//     }\n\n//     if (votesLeft <= 0) {\n//       alert('No votes left for today!');\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://127.0.0.1:8000/api/restaurants/restaurants/vote/', \n//         { restaurantId, voteType }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants(response.data.restaurants || []);\n//       setVotesLeft(response.data.votesLeft || votesLeft);\n//     } catch (error) {\n//       console.error('Error voting:', error);\n//       alert('An error occurred while voting.');\n//     }\n//   };\n\n//   // Handle adding a new restaurant\n//   const handleAddRestaurant = async () => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to add a restaurant.');\n//       return;\n//     }\n\n//     if (!newRestaurantName) {\n//       alert('Please enter a restaurant name.');\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.post('http://127.0.0.1:8000/api/restaurants/restaurants/add_restaurant/', \n//         { name: newRestaurantName }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants([...restaurants, response.data]);\n//       setNewRestaurantName('');\n//     } catch (error) {\n//       console.error('Error adding restaurant:', error);\n//       alert('An error occurred while adding the restaurant.');\n//     }\n//   };\n\n//   // Handle updating a restaurant\n//   const handleUpdateRestaurant = async () => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to update a restaurant.');\n//       return;\n//     }\n\n//     if (!editRestaurantName) {\n//       alert('Please enter a restaurant name.');\n//       return;\n//     }\n\n//     try {\n//       await axios.put(`http://127.0.0.1:8000/api/restaurants/restaurants/${editRestaurantId}/`, \n//         { name: editRestaurantName }, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       const updatedRestaurants = restaurants.map(restaurant => \n//         restaurant.id === editRestaurantId ? { ...restaurant, name: editRestaurantName } : restaurant\n//       );\n//       setRestaurants(updatedRestaurants);\n//       setEditRestaurantId(null);\n//       setEditRestaurantName('');\n//     } catch (error) {\n//       console.error('Error updating restaurant:', error);\n//       alert('An error occurred while updating the restaurant.');\n//     }\n//   };\n\n//   // Handle deleting a restaurant\n//   const handleDeleteRestaurant = async (restaurantId) => {\n//     if (!isAuthenticated) {\n//       alert('Please log in to delete a restaurant.');\n//       return;\n//     }\n\n//     try {\n//       await axios.delete(`http://127.0.0.1:8000/api/restaurants/restaurants/${restaurantId}/`, \n//         { headers: { Authorization: `Bearer ${localStorage.getItem('access_token')}` } }\n//       );\n//       setRestaurants(restaurants.filter(restaurant => restaurant.id !== restaurantId));\n//     } catch (error) {\n//       console.error('Error deleting restaurant:', error);\n//       alert('An error occurred while deleting the restaurant.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Restaurants</h1>\n//       <p>Votes left today: {votesLeft}</p>\n//       {loading && <p>Loading...</p>}\n//       {error && <p>{error}</p>}\n\n//       {isAuthenticated ? (\n//         <div>\n//           <h2>Add New Restaurant</h2>\n//           <input \n//             type=\"text\" \n//             value={newRestaurantName} \n//             onChange={(e) => setNewRestaurantName(e.target.value)} \n//             placeholder=\"Restaurant Name\" \n//           />\n//           <button onClick={handleAddRestaurant}>Add Restaurant</button>\n//         </div>\n//       ) : (\n//         <p>Please log in to add a restaurant or vote.</p>\n//       )}\n\n//       {isAuthenticated && editRestaurantId && (\n//         <div>\n//           <h2>Update Restaurant</h2>\n//           <input \n//             type=\"text\" \n//             value={editRestaurantName} \n//             onChange={(e) => setEditRestaurantName(e.target.value)} \n//             placeholder=\"New Restaurant Name\" \n//           />\n//           <button onClick={handleUpdateRestaurant}>Update Restaurant</button>\n//         </div>\n//       )}\n\n//       <ul>\n//         {Array.isArray(restaurants) && restaurants.length > 0 ? (\n//           restaurants.map(restaurant => (\n//             <li key={restaurant.id}>\n//               {restaurant.name} - Votes: {restaurant.votes || 0}\n//               {isAuthenticated ? (\n//                 <>\n//                   <button onClick={() => handleVote(restaurant.id, 'first')}>Vote 1</button>\n//                   <button onClick={() => handleVote(restaurant.id, 'second')}>Vote 0.5</button>\n//                   <button onClick={() => handleVote(restaurant.id, 'third')}>Vote 0.25</button>\n//                   <button onClick={() => { setEditRestaurantId(restaurant.id); setEditRestaurantName(restaurant.name); }}>Edit</button>\n//                   <button onClick={() => handleDeleteRestaurant(restaurant.id)}>Delete</button>\n//                 </>\n//               ) : (\n//                 <p>Login to vote</p>\n//               )}\n//             </li>\n//           ))\n//         ) : (\n//           <p>No restaurants available</p>\n//         )}\n//       </ul>\n//     </div>\n//   );\n// };\n\n// export default RestaurantList;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}